frameworkVersion: "3.32.2"
service: foxscript-data

useDotenv: true

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-python-requirements

custom:
  stage: ${opt:stage, self:provider.stage}

  bucket_name: foxscript-${self:custom.stage}
  plag_checker_bucket: foxscript-${self:custom.stage}-plagchecker

  serverless-offline:
    httpPort: 3006

  # Lambda Layers
  pythonRequirements:
    dockerizePip: true
    pipCmdExtraArgs: ['--platform manylinux2014_x86_64', '--only-binary=:all:']
    noDeploy:
      - unittest-parametrize
    layer:
      name: ${self:service}
      compatibleRuntimes:
        - python3.9

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!package-lock.json'
    - '!package.json'
    - researcher.py
    - ../utils/**

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-east-1
  lambdaHashingVersion: 20201221
  apiGateway:
    restApiId:
      'Fn::ImportValue': foxscript-${self:custom.stage}-ApiGateway-restApiId
    restApiRootResourceId:
      'Fn::ImportValue': foxscript-${self:custom.stage}-ApiGateway-rootResourceId
  ecr:
    images:
      data_image:
        path: ../..
        file: data.Dockerfile

  environment:
    STAGE: ${self:custom.stage}
    BUCKET: ${self:custom.bucket_name}
    WEAVIATE_URL: ${env:WEAVIATE_URL}
    WEAVIATE_API_KEY: ${env:WEAVIATE_API_KEY}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    OPENAI_ORGANIZATION: ${env:OPENAI_ORGANIZATION}
    SERPER_API_KEY: ${env:SERPER_API_KEY}
    GOOG_CLIENT_ID: ${env:GOOG_CLIENT_ID}
    GOOG_CLIENT_SECRET: ${env:GOOG_CLIENT_SECRET}
    ORIGINALITY_PLAG: ${env:ORIGINALITY_PLAG}

  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            # Lambda Actions
            - 'lambda:InvokeFunction'
            - 'lambda:InvokeAsync'
            # S3 Actions
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            - 's3:ListBucket'
            # SQS Actions
            - 'sqs:*'
          Resource: '*'
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: '*'

functions:
  plag_checker:
    handler: plag_checker.handler
    memorySize: 256
    timeout: 300
    maximumRetryAttempts: 0
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: plag_checker
          method: post
          cors: true
      - s3:
          bucket: ${self:custom.plag_checker_bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .md
      - s3:
          bucket: ${self:custom.plag_checker_bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .docx
      - s3:
          bucket: ${self:custom.plag_checker_bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .txt

  load_data:
    image:
      name: data_image
      command:
        - load_data.handler
      entryPoint:
        - '/lambda-entrypoint.sh'
    memorySize: 512
    timeout: 300
    maximumRetryAttempts: 0
    events:
      - http:
          path: load_data
          method: post
          cors: true
      - s3:
          bucket: ${self:custom.bucket_name}
          event: s3:ObjectCreated:*
          existing: true

  scraper:
    image:
      name: data_image
      command:
        - researcher.scrape
      entryPoint:
        - '/lambda-entrypoint.sh'
    memorySize: 2048
    timeout: 600
    maximumRetryAttempts: 0
    events:
      - http:
          path: scraper
          method: post
          cors: true

  researcher:
    image:
      name: data_image
      command:
        - researcher.research
      entryPoint:
        - '/lambda-entrypoint.sh'
    memorySize: 2048
    timeout: 600
    maximumRetryAttempts: 1
    events:
      - http:
          path: researcher
          method: post
          cors: true

