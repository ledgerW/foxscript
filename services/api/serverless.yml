frameworkVersion: "3.32.2"
service: foxscript-api

useDotenv: true

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-python-requirements

custom:
  stage: ${opt:stage, self:provider.stage}

  bucket_name: foxscript-content-${self:custom.stage}

  serverless-offline:
    httpPort: 3005
    useDocker: true

  # Lambda Layers
  pythonRequirements:
    dockerizePip: true
    pipCmdExtraArgs: ['--platform manylinux2014_x86_64', '--only-binary=:all:']
    layer:
      name: ${self:service}
      
package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!package-lock.json'
    - '!package.json'
    - weaviate_api.py
    - ../utils/**
    - ../../weaviate/schema/Chunk.json
    - ../../weaviate/schema/Content.json

provider:
  name: aws
  stage: dev
  region: us-east-1
  runtime: python3.9
  lambdaHashingVersion: 20201221
  apiGateway:
    restApiId:
      'Fn::ImportValue': foxscript-${self:custom.stage}-ApiGateway-restApiId
    restApiRootResourceId:
      'Fn::ImportValue': foxscript-${self:custom.stage}-ApiGateway-rootResourceId
  ecr:
    images:
      api_image:
        path: ..
        file: api.Dockerfile
 
  environment:
    STAGE: ${self:custom.stage}
    BUCKET: ${self:custom.bucket_name}
    WEAVIATE_URL: ${env:WEAVIATE_URL}
    WEAVIATE_API_KEY: ${env:WEAVIATE_API_KEY}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    OPENAI_ORGANIZATION: ${env:OPENAI_ORGANIZATION}
    SERPER_API_KEY: ${env:SERPER_API_KEY}
    BUBBLE_API_ROOT: ${env:BUBBLE_API_ROOT}
    BUBBLE_API_KEY: ${env:BUBBLE_API_KEY}

  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            # Lambda Actions
            - 'lambda:InvokeFunction'
            - 'lambda:InvokeAsync'
            # S3 Actions
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            - 's3:ListBucket'
            # ECS Actions
            - 'ecs:*'
            # ECR Actions
            - 'ecr:*'
            # IAM Actions
            - 'iam:*'
            # SQS Actions
            - 'sqs:*'
          Resource: '*'
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: '*'

functions:
  data_class:
    handler: weaviate_api.data_class
    memorySize: 512
    timeout: 120
    maximumRetryAttempts: 0
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: data_class
          method: post
          cors: true

  upload_to_s3:
    handler: weaviate_api.upload_to_s3
    memorySize: 2048
    timeout: 300
    maximumRetryAttempts: 0
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: upload_to_s3
          method: post
          cors: true

  workflow:
    handler: workflow_api.workflow
    memorySize: 1024
    timeout: 600
    maximumRetryAttempts: 0
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: workflow
          method: post
          cors: true

  run_workflow:
    handler: workflow_api.run_workflow
    memorySize: 1024
    timeout: 600
    maximumRetryAttempts: 0
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: run_workflow
          method: post
          cors: true

  step:
    handler: workflow_api.step
    memorySize: 512
    timeout: 600
    maximumRetryAttempts: 0
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: step
          method: post
          cors: true

  run_step:
    handler: workflow_api.run_step
    memorySize: 512
    timeout: 600
    maximumRetryAttempts: 0
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: run_step
          method: post
          cors: true
      
